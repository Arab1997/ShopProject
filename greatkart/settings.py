"""
Django settings for greatkart project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

import dj_database_url
from decouple import config
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, "eVar", ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECRET_KEY='django-insecure-n)+l%k(eml^!arg%f$nn1(*@z(tj7+%v%m%hmm698c^s+)o9e)'
# DEBUG = True

SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG')

# Default hosts
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'djangoshop1.pythonanywhere.com']

# Get additional hosts from environment variable
extra_hosts = os.environ.get("ALLOWED_HOSTS", "")
if extra_hosts:
    ALLOWED_HOSTS += extra_hosts.split()

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    'category',
    'accounts',
    'store',
    'carts',
    'orders',
    'storages',
    'rest_framework',
    'paycomuz',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_session_timeout.middleware.SessionTimeoutMiddleware',
]

SESSION_EXPIRE_SECONDS = 3600  # 1 hour
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
SESSION_TIMEOUT_REDIRECT = 'accounts/login'

ROOT_URLCONF = 'greatkart.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        # 'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'category.context_processors.menu_links',
                'carts.context_processors.counter',
            ],
        },
    },
]

WSGI_APPLICATION = 'greatkart.wsgi.application'

AUTH_USER_MODEL = 'accounts.Account'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default="sqlite:///" + os.path.join(BASE_DIR, "db.sqlite3")
    )
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')
    ]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
SERVER_EMAIL = 'maxmudovabdullo97@gmail.com'
DEFAULT_FROM_EMAIL = 'maxmudovabdullo97@gmail.com'




PAYCOM_SETTINGS = {
    'KASSA_ID': '66c325238326c8dc50abd2f6',
    'SECRET_KEY': 'E7@u5giUb%FW#W%vspEC7P%QsKsHiBs98kiz',# password
    'TOKEN': '66c325238326c8dc50abd2f6',
    'ACCOUNTS': {
        'KEY': 'order_id',  # Key from your transaction model
    }
}

# PAYCOM_MERCHANT_ID = '66c325238326c8dc50abd2f6'
# PAYCOM_SECRET_KEY = 'E7@u5giUb%FW#W%vspEC7P%QsKsHiBs98kiz'
# PAYCOM_URL = 'https://checkout.paycom.uz'


#
# PAYME_API_URL = 'https://payme.uz/api/endpoint'
# PAYME_MERCHANT_ID = '66c325238326c8dc50abd2f6'
# PAYME_SECRET_KEY = 'E7@u5giUb%FW#W%vspEC7P%QsKsHiBs98kiz'

# PAYCOM_SETTINGS = {
#     'HOST':'https://checkout.test.paycom.uz/api',
#     'ID': '66c325238326c8dc50abd2f6',
#     'PATH_CLASS': 'apps.order.views',
#     'KASSA_ID': '66c325238326c8dc50abd2f6',
#     'SECRET_KEY': 'E7@u5giUb%FW#W%vspEC7P%QsKsHiBs98kiz',# password
#     'TOKEN': '66c325238326c8dc50abd2f6',
#     'ACCOUNTS': {
#         'KEY': 'order_id',  # Key from your transaction model
#     }
# }
